spring:
  application:
    name: back
  #autoconfigure:
  #  exclude:
   #  - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
   #  - org.springframework.boot.autoconfigure.session.SessionAutoConfiguration
  config:
    import: optional:file:./.env[.properties]
  flyway:
    enabled: false
  profiles:
    active: test-pg
  output:
    ansi:
      enabled: always
  datasource:
    hikari:
      auto-commit: false
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        use_sql_comments: true
        format_sql: true
        highlight_sql: true
        default_batch_fetch_size: 100
    open-in-view: false

  session:
    redis:
      repository-type: indexed

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope:
              - user:email
              - read:user
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id
  task:
    execution:
      pool:
        core-size: 2           # AWS Small 티어 (1-2 vCPU) 기준 기본 스레드
        max-size: 4            # 최대 스레드 (버스트 대응)
        queue-capacity: 100    # 대기 큐 크기 (메모리 2GB 고려, 버퍼링 증가)
        await-termination-seconds: 60  # 종료 대기 시간 (초)
      thread-name-prefix: "async-ai-"
logging:
  level:
    org.springframework.security: DEBUG
    org.hibernate.orm.jdbc.bind: TRACE
    org.hibernate.orm.jdbc.extract: TRACE
    org.springframework.transaction.interceptor: TRACE

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    groups:
      enabled: true
  api-docs:
    path: /v3/api-docs

# AI Services Configuration
ai:
  text:
    gemini:
      api-key: ${GEMINI_API_KEY}
      model: gemini-2.5-flash
      model20: gemini-2.0-flash
      base-url: https://generativelanguage.googleapis.com
      timeout-seconds: 70           # AI 응답 대기 시간 (시나리오 생성: 30-40초 + 여유 30초)
      max-retries: 2                # 재시도 횟수 (총 3번 시도, 일시 오류 복구)
      retry-delay-seconds: 3        # 재시도 간격 (초, 지수 백오프 권장)
      max-context-tokens: 8192
  image:
    enabled: true
    provider: stable-diffusion
    api-key: ${STABILITY_API_KEY}
    base-url: https://api.stability.ai
    timeout-seconds: 60
    max-retries: 3
    retry-delay-seconds: 2          # 재시도 간격 (초)
    # Storage 설정 (local 또는 s3)
    storage-type: local                               # 개발 환경: local 사용
    # 로컬 스토리지 설정
    local-storage-path: ./uploads/images
    local-base-url: http://localhost:8080/images
  situation:
    topK: 3                    # 성능 최적화 (5 → 3)
    maxOutputTokens: 128       # 성능 최적화 완료
    timeout-seconds: 30        # 상황 생성 타임아웃 (30초, 실시간 응답용)
  base-scenario:
    maxOutputTokens: 16384     # 8192 → 16384 (gemini-2.5-flash 최대 65536, 충분한 여유)
    timeout-seconds: 90        # 베이스 시나리오 생성 타임아웃 (실제: 30-40초 + 여유)
    # Generation Config (AI 응답 품질 제어)
    temperature: 0.7           # 창의성 vs 일관성 (0.0=결정론적, 1.0=창의적)
    topP: 0.9                  # 누적 확률 기준 필터링 (0.9=상위 90%)
    topK: 5                   # 상위 K개 토큰만 고려 (다양성 확보)
  decision-scenario:
    maxOutputTokens: 16384     # 8192 -> 16384 (gemini-2.5-flash 최대 65536, 충분한 여유)
    timeout-seconds: 90        # 결정 시나리오 생성 타임아웃 (실제: 30-40초 + 여유)
    # Generation Config (AI 응답 품질 제어)
    temperature: 0.7           # 창의성 vs 일관성 (0.0=결정론적, 1.0=창의적)
    topP: 0.9                  # 누적 확률 기준 필터링 (0.9=상위 90%)
    topK: 5                   # 상위 K개 토큰만 고려 (다양성 확보)
  embedding:
    dim: 768

server:
  servlet:
    session:
      timeout: 30m
      cookie:
        name: JSESSIONID
        http-only: true
        secure: false      # 로컬 false, 운영 true(HTTPS)
        same-site: Lax
        domain: ${custom.site.baseDomain}
  forward-headers-strategy: native

custom:
  dev:
    baseDomain: localhost
    frontUrl: "http://${custom.dev.baseDomain}:3000"
    backUrl: "http://${custom.dev.baseDomain}:8080"
  prod:
    baseDomain: ${PROD_BASE_DOMAIN}
    frontUrl: "https://www.${custom.prod.baseDomain}"
    backUrl: "https://api.${custom.prod.baseDomain}"
  site:
    baseDomain: ${custom.dev.baseDomain}
    frontUrl: ${custom.dev.frontUrl}
    backUrl: ${custom.dev.backUrl}

dvcs:
  backfill:
    enabled: false
    http-enabled: false