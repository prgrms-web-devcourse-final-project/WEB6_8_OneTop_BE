--liquibase formatted sql
--dialect postgresql

-- ========================================
-- 사용자 테이블
-- ========================================
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    auth_provider VARCHAR(10) CHECK (auth_provider IN ('GITHUB','GOOGLE','GUEST','LOCAL')),
    beliefs VARCHAR(255),
    birthday_at TIMESTAMP(6) NOT NULL,
    email VARCHAR(255) NOT NULL,
    gender VARCHAR(1) CHECK (gender IN ('F','M','N','O')),
    life_satis INTEGER,
    mbti VARCHAR(4) CHECK (mbti IN ('ENFJ','ENFP','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP')),
    nickname VARCHAR(80) NOT NULL,
    password VARCHAR(255),
    relationship INTEGER,
    risk_avoid INTEGER,
    role VARCHAR(10) CHECK (role IN ('ADMIN','GUEST','USER')) NOT NULL,
    updated_at TIMESTAMP(6),
    username VARCHAR(30) NOT NULL,
    work_life_bal INTEGER
);

-- ========================================
-- 베이스라인 및 노드 테이블
-- ========================================
CREATE TABLE base_lines (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    title VARCHAR(100) NOT NULL,
    user_id BIGINT NOT NULL
);

CREATE TABLE base_nodes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    age_year INTEGER NOT NULL,
    alt_opt1 VARCHAR(255),
    alt_opt1target_decision_id BIGINT,
    alt_opt2 VARCHAR(255),
    alt_opt2target_decision_id BIGINT,
    category VARCHAR(20) CHECK (category IN ('CAREER','EDUCATION','ETC','FINANCE','HEALTH','LOCATION','RELATIONSHIP')),
    decision TEXT,
    description TEXT,
    fixed_choice VARCHAR(255),
    node_kind VARCHAR(10) CHECK (node_kind IN ('BASE','DECISION')) NOT NULL,
    situation TEXT,
    base_line_id BIGINT,
    parent_node_id BIGINT,
    user_id BIGINT NOT NULL
);

CREATE TABLE decision_lines (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    status VARCHAR(10) CHECK (status IN ('CANCELLED','COMPLETED','DRAFT')) NOT NULL,
    base_line_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL
);

CREATE TABLE decision_nodes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    age_year INTEGER NOT NULL,
    background TEXT,
    category VARCHAR(20) CHECK (category IN ('CAREER','EDUCATION','ETC','FINANCE','HEALTH','LOCATION','RELATIONSHIP')),
    decision TEXT,
    description TEXT,
    node_kind VARCHAR(10) CHECK (node_kind IN ('BASE','DECISION')) NOT NULL,
    option1 VARCHAR(255),
    option2 VARCHAR(255),
    option3 VARCHAR(255),
    parent_option_index INTEGER,
    selected_index INTEGER,
    situation TEXT,
    base_node_id BIGINT,
    dec_line_id BIGINT NOT NULL,
    parent_node_id BIGINT,
    user_id BIGINT NOT NULL
);

-- ========================================
-- 포스트 및 댓글 테이블
-- ========================================
CREATE TABLE post (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    category VARCHAR(10) CHECK (category IN ('CHAT','POLL','SCENARIO')),
    content TEXT,
    hide BOOLEAN DEFAULT TRUE NOT NULL,
    like_count INTEGER NOT NULL,
    title VARCHAR(200),
    updated_at TIMESTAMP(6),
    vote_content JSONB,
    scenario_id BIGINT,
    user_id BIGINT
);

CREATE TABLE comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    content TEXT NOT NULL,
    hide BOOLEAN DEFAULT TRUE NOT NULL,
    like_count INTEGER NOT NULL,
    updated_at TIMESTAMP(6),
    post_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL
);

CREATE TABLE comment_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    comment_id BIGINT,
    user_id BIGINT
);

CREATE TABLE post_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    post_id BIGINT,
    user_id BIGINT
);

-- ========================================
-- 투표 및 시나리오 테이블
-- ========================================
CREATE TABLE poll_votes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    choice_json JSONB NOT NULL,
    poll_uid UUID NOT NULL,
    post_id BIGINT NOT NULL,
    user_id BIGINT
);

CREATE TABLE scenarios (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    description TEXT,
    error_message TEXT,
    img VARCHAR(255),
    job VARCHAR(200),
    status VARCHAR(15) CHECK (status IN ('COMPLETED','FAILED','PENDING','PROCESSING')) NOT NULL,
    summary TEXT,
    timeline_titles TEXT,
    total INTEGER NOT NULL,
    updated_date TIMESTAMP(6),
    base_line_id BIGINT NOT NULL,
    decision_line_id BIGINT,
    user_id BIGINT NOT NULL
);

CREATE TABLE scene_compare (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    compare_result TEXT,
    result_type VARCHAR(10) CHECK (result_type IN ('TOTAL','건강','경제','관계','직업','행복')),
    scenario_id BIGINT NOT NULL
);

CREATE TABLE scene_type (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_date TIMESTAMP(6),
    analysis TEXT,
    point INTEGER NOT NULL,
    type VARCHAR(10) CHECK (type IN ('건강','경제','관계','직업','행복')),
    scenarios_id BIGINT
);

-- ========================================
-- 인덱스 정의
-- ========================================
CREATE INDEX idx_post_category_created ON post (category, created_date DESC);
CREATE INDEX idx_post_user_created ON post (user_id, created_date DESC);
CREATE INDEX idx_post_title ON post (title);
CREATE INDEX idx_comment_post_created ON comments (post_id, created_date DESC);
CREATE INDEX idx_comment_post_like ON comments (post_id, like_count DESC);

-- ========================================
-- 유니크 제약조건
-- ========================================
ALTER TABLE users ADD CONSTRAINT uk_users_email UNIQUE (email);
ALTER TABLE users ADD CONSTRAINT uk_users_nickname UNIQUE (nickname);
ALTER TABLE comment_likes ADD CONSTRAINT comment_like_uk UNIQUE (comment_id, user_id);
ALTER TABLE decision_nodes ADD CONSTRAINT uq_decision_line_age UNIQUE (dec_line_id, age_year);
ALTER TABLE poll_votes ADD CONSTRAINT uq_logged_in_once UNIQUE (post_id, poll_uid, user_id);
ALTER TABLE post ADD CONSTRAINT uq_post_scenario UNIQUE (scenario_id);
ALTER TABLE post_likes ADD CONSTRAINT post_like_uk UNIQUE (post_id, user_id);
ALTER TABLE scenarios ADD CONSTRAINT uq_scenario_decision_line UNIQUE (decision_line_id);

-- ========================================
-- 외래키 제약조건
-- ========================================
ALTER TABLE base_lines ADD CONSTRAINT fk_base_lines_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE base_nodes ADD CONSTRAINT fk_base_nodes_base_line FOREIGN KEY (base_line_id) REFERENCES base_lines(id);
ALTER TABLE base_nodes ADD CONSTRAINT fk_base_nodes_parent FOREIGN KEY (parent_node_id) REFERENCES base_nodes(id);
ALTER TABLE base_nodes ADD CONSTRAINT fk_base_nodes_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE comment_likes ADD CONSTRAINT fk_comment_likes_comment FOREIGN KEY (comment_id) REFERENCES comments(id);
ALTER TABLE comment_likes ADD CONSTRAINT fk_comment_likes_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE comments ADD CONSTRAINT fk_comments_post FOREIGN KEY (post_id) REFERENCES post(id);
ALTER TABLE comments ADD CONSTRAINT fk_comments_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE decision_lines ADD CONSTRAINT fk_decision_lines_base_line FOREIGN KEY (base_line_id) REFERENCES base_lines(id);
ALTER TABLE decision_lines ADD CONSTRAINT fk_decision_lines_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE decision_nodes ADD CONSTRAINT fk_decision_nodes_base_node FOREIGN KEY (base_node_id) REFERENCES base_nodes(id);
ALTER TABLE decision_nodes ADD CONSTRAINT fk_decision_nodes_dec_line FOREIGN KEY (dec_line_id) REFERENCES decision_lines(id);
ALTER TABLE decision_nodes ADD CONSTRAINT fk_decision_nodes_parent FOREIGN KEY (parent_node_id) REFERENCES decision_nodes(id);
ALTER TABLE decision_nodes ADD CONSTRAINT fk_decision_nodes_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE poll_votes ADD CONSTRAINT fk_poll_votes_post FOREIGN KEY (post_id) REFERENCES post(id);
ALTER TABLE poll_votes ADD CONSTRAINT fk_poll_votes_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE post ADD CONSTRAINT fk_post_scenario FOREIGN KEY (scenario_id) REFERENCES scenarios(id);
ALTER TABLE post ADD CONSTRAINT fk_post_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE post_likes ADD CONSTRAINT fk_post_likes_post FOREIGN KEY (post_id) REFERENCES post(id);
ALTER TABLE post_likes ADD CONSTRAINT fk_post_likes_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE scenarios ADD CONSTRAINT fk_scenarios_base_line FOREIGN KEY (base_line_id) REFERENCES base_lines(id);
ALTER TABLE scenarios ADD CONSTRAINT fk_scenarios_decision_line FOREIGN KEY (decision_line_id) REFERENCES decision_lines(id);
ALTER TABLE scenarios ADD CONSTRAINT fk_scenarios_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE scene_compare ADD CONSTRAINT fk_scene_compare_scenario FOREIGN KEY (scenario_id) REFERENCES scenarios(id);
ALTER TABLE scene_type ADD CONSTRAINT fk_scene_type_scenario FOREIGN KEY (scenarios_id) REFERENCES scenarios(id);
